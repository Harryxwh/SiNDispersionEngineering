switchtolayout;
deleteall;

# Create folders if they do not yet exist
#for(wavl_idx=1:num_sweep_pt){
    #format short;
    #wavelength = wavelength_array(wavl_idx);

    #folder_path = folder_name + num2str(wavelength*1e9);
    #?"mkdir "+folder_path;
    #system("mkdir "+folder_path);
#}


#Upper Ring
addrect;
set("name","Upper Ring");
set("x",0);
set("x span",Lx_WG);
set("y min",0);
set("y max",Ly_WG);
#set("z",0);
#set("z span",Lz_WG1);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

#Lower Ring
copy(0,(gap+Ly_WG),0);

#BOX
addrect;
set("name","BOX");
set("x",0);
set("x span",Lx_Buried_Oxide);
set("y max",0);
set("y min",-Ly_Buried_Oxide);
#set("z",0);
#set("z span",Lz_Buried_Oxide);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_cladding);

#Cladding
addrect;
set("name","Cladding");
set("x",0);
set("x span",Lx_Cladding);
set("y min",0);
set("y max",Ly_Cladding);
#set("z",0);
#set("z span",Lz_Cladding);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_cladding);

addfde;
set("solver type","2D Z normal");
set("x",0*um);
set("y",0);
set("x span",Lx_FDE);
set("y min",Ly_FDE_min);
set("y max",Ly_FDE_max);
#set("x min bc","Metal");
#set("x max bc","Metal");
#set("y min bc","Metal");
#set("y max bc","Metal");
set("x min bc","PML");
set("x max bc","PML");
set("y min bc","PML");
set("y max bc","PML");
set("define x mesh by","number of mesh cells");
set("define y mesh by","number of mesh cells");
set("mesh cells x",mesh_cells_x);
set("mesh cells y",mesh_cells_y);

set("bent waveguide",1);
set("bend location x", 0);
set("bend location y", 0);
set("bend location z", 0);
set("bend radius",bend_radius);

addmesh;
set("name","mesh_waveguide");
set("x min", - Lx_WG -1*um);
set("x max", Lx_WG +1*um );
set("y min", gap - 1*um);
set("y max", gap + 1*um);
set("override x mesh",1);
set("override y mesh",1);
set("override z mesh",0);
set("set maximum mesh step",1);
set("dx",10*nm);
set("dy",10*nm);

addmesh;
set("name","mesh_waveguide");
set("x min", - Lx_WG -1*um);
set("x max", Lx_WG + 1*um );
set("y min", Ly_WG - 0.8*um);
set("y max", Ly_WG + 0.8*um);
set("override x mesh",1);
set("override y mesh",1);
set("override z mesh",0);
set("set maximum mesh step",1);
set("dx",10*nm);
set("dy",10*nm);

Comp_name_list = {"Ex","Ey","Ez","Hx","Hy","Hz"};

# results combined in one file
info_total_filename  = folder_name + "Lumerical_supermodes_results.txt";
if(fileexists(info_total_filename)){rm(info_total_filename);}

#print header
write(info_total_filename,"Bending Radius = "+num2str(bend_radius)+", gap_x = " + num2str(gap)+ ", num of cells = " + num2str(mesh_cells_x)+"X"+num2str(mesh_cells_y));
write(info_total_filename,"wavelength,modeidx,neff,ng,loss,polarization,beta_ang");

for(wavl_idx=1:num_sweep_pt){

    switchtolayout;

    wavelength = wavelength_array(wavl_idx);
    setnamed("FDE","wavelength",wavelength);

    format short;
    folder_path = folder_name + num2str(wavelength*1e9);
    info_filename = folder_path+ "\Mode_info.txt";          # result for one wavl within folder for each wavelength
    if(fileexists(info_filename)){rm(info_filename);}
    #print header
    write(info_filename,"wavelength,modeidx,neff,ng,loss,polarization,beta_ang");

    findmodes;

    for (mode_idx=1:Max_Mode_Idx){

        neff =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"neff"));
        ng =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"ng"));
        loss =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"loss"));
        polarization=pinch(getdata("FDE::data::mode"+num2str(mode_idx),"TE polarization fraction"));

        beta_ang = real(2*pi/wavelength * bend_radius * neff);

        Ex = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ex"));
        Ey = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ey"));
        Ez = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ez"));
        Hx = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hx"));
        Hy = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hy"));
        Hz = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hz"));

        Comp_list = {Ex,Ey,Ez,Hx,Hy,Hz};
        format short;
        info = num2str(wavelength*1e9) +","+ num2str(mode_idx);
        format long;
        info = info  +","+ num2str(neff) +","+ num2str(ng) +","+ num2str(loss) +","+ num2str(polarization) +","+ num2str(beta_ang);
        write(info_filename,info);
        write(info_total_filename,info);

        # First and Second mode
        if(mode_idx < 3){
            ?"Wavelength: " + num2str(wavelength*1e6) + " um";
            ?"ModeIdx: " + num2str(mode_idx);
            ?"Effective index: " + num2str(real(neff));
            ?"beta_ang: " + num2str(beta_ang);
            ?"\n";
        }

        # Write mode profile matrix
        #for (j=1:6){
            #format short;
            #filename = folder_path+"\Mode"+num2str(mode_idx)+"_"+Comp_name_list{j}+".txt";
            #if(fileexists(filename)){
                #rm(filename);
            #}
            #format long; # set num2str() to return 16 digits of precision
            #write(filename,num2str(Comp_list{j}));
        #}

    }
}

