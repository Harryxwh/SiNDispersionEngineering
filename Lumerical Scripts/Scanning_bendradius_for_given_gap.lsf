switchtolayout;
deleteall;

um = 1e-6;
nm = 1e-9;

Ly_WG = 0.1*um; # height of the WG
Lz_WG = 50*um; # length of the WG

Lx_Cladding = 50*um; # length of the WG
Ly_Cladding = 2*um; # width of the WG
Lz_Cladding = 50*um; # height of the WG

Lx_Buried_Oxide = 50*um;
Ly_Buried_Oxide = 8*um;
Lz_Buried_Oxide = 50*um;

Lx_FDE = 20*um;
Ly_FDE = 10*um;

mesh_cells_x = 500;
mesh_cells_y = 250;

wavelength  = 1550*nm;

material_core = "Si3N4 (Silicon Nitride) - Phillip";
material_clad = "SiO2 (Glass) - Palik";

Max_Mode_Idx = 3;

Lx_start    = 8*um;
Lx_end      = 8*um;
#num_of_pts_Lx  = 10;
num_of_pts_Lx  = 1;
Lx_arr      = linspace(Lx_start,Lx_end,num_of_pts_Lx);

r_start    = 3.5*um;
r_end      = 4.5*um;
num_of_pts_r = 11;
r_arr = linspace(r_start,r_end,num_of_pts_r);
bend_arr = zeros(num_of_pts_r);

bend_radius_start = 1004*um;
gap = 5*um;

#bend_radius_start = 1000*um;
#gap = 0*um;

#results
neff_array  = zeros(num_of_pts_Lx);
result_arr = zeros(num_of_pts_r);
format short;
filename = "Scanning_Lx_and_r.txt";
if(fileexists(filename)){rm(filename);}

for (r_idx = 1:num_of_pts_r)
{
    neff_array  = zeros(num_of_pts_Lx);
    bend_radius = bend_radius_start + gap + r_arr(r_idx);
    bend_arr(r_idx) = bend_radius;
    ?"bend_radius = " + num2str(bend_radius /um)+" um";

    for(Lx_idx=1:num_of_pts_Lx){

        switchtolayout;
        deleteall;

        #Lx_WG = Lx_arr(Lx_idx);
        Lx_WG = 2*(bend_radius-bend_radius_start-gap);
        ?"Lx_WG = " + num2str(Lx_WG /um)+" um";

        #WG
        addrect;
        set("name","WG");
        set("x",0);
        set("x span",Lx_WG);
        set("y min",0);
        set("y max",Ly_WG);
        #set("z",0);
        #set("z span",Lz_WG);
        set("override mesh order from material database",true);
        set("mesh order",2);
        set("material",material_core);

        # BOX
        addrect;
        set("name","BOX");
        set("x",0);
        set("x span",Lx_Buried_Oxide);
        set("y max",0);
        set("y min",-Ly_Buried_Oxide);
        #set("z",0);
        #set("z span",Lz_Buried_Oxide);
        set("override mesh order from material database",true);
        set("mesh order",3);
        set("material",material_clad);

        # Cladding
        addrect;
        set("name","Cladding");
        set("x",0);
        set("x span",Lx_Cladding);
        set("y min",0);
        set("y max",Ly_Cladding);
        #set("z",0);
        #set("z span",Lz_Cladding);
        set("override mesh order from material database",true);
        set("mesh order",3);
        set("material",material_clad);

        addfde;
        set("solver type","2D Z normal");
        set("x",0);
        set("y",0);
        set("x span",Lx_FDE);
        set("y min",-Ly_FDE/2);
        set("y max",Ly_FDE/2);
        set("x min bc","Metal");
        set("x max bc","Metal");
        set("y min bc","Metal");
        set("y max bc","Metal");
        set("define x mesh by","number of mesh cells");
        set("define y mesh by","number of mesh cells");
        set("mesh cells x",mesh_cells_x);
        set("mesh cells y",mesh_cells_y);

        set("bent waveguide", 1);
        set("bend location x", 0);
        set("bend location y", 0);
        set("bend location z", 0);
        set("bend radius",bend_radius);

        findmodes;

        mode_idx    = 1;    #fundamental mode
        neff        = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"neff"));
        neff_array(Lx_idx) = real(neff);
        format long;
        ?"neff = " + num2str(real(neff));

    }

    format long;
    #a line in the table for a fixed bend radius
    neff_fixed_r = num2str(bend_radius * 1e6)+",";
    for(Lx_idx=1:num_of_pts_Lx-1)
    {
        if(num_of_pts_Lx>1){
        neff_fixed_r = neff_fixed_r + num2str(neff_array(Lx_idx)) + ",";
        }
    }
    neff_fixed_r = neff_fixed_r + num2str(neff_array(num_of_pts_Lx));
    write(filename,neff_fixed_r);
    result_arr(r_idx) = neff_array(1);
    ?"\n";
}
plot(bend_arr /um,result_arr, "R (um)", "Effective Index at 1550nm");



#for (r_idx = 1:num_of_pts_r)
#{
    #neff_array  = zeros(num_of_pts_Lx);
    #bend_radius = bend_radius_start + r_arr(r_idx)*um;
    #?"bend_radius = " + num2str(bend_radius /um);
    #for(Lx_idx=1:num_of_pts_Lx){
        #switchtolayout;
        #deleteall;
        #Lx_WG = Lx_arr(Lx_idx);
        #?"Lx_WG = " + num2str(Lx_WG);
        #neff_array(Lx_idx) = Lx_idx;
    #}
    #?"\n";
    #format long;
    #neff_fixed_r = num2str(bend_radius * 1e6)+",";
    #for(Lx_idx=1:num_of_pts_Lx-1)
    #{
        #neff_fixed_r = neff_fixed_r + num2str(neff_array(Lx_idx)) + ",";
    #}
    #neff_fixed_r = neff_fixed_r + num2str(neff_array(num_of_pts_Lx));
    #write(filename,neff_fixed_r);
#}

