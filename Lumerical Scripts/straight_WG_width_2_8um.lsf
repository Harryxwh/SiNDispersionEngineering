################################################
# setting up parameters for Eigenmode calc for straight WG
# Straight_WG_width_2_8um
################################################
um = 1e-6;
nm = 1e-9;

# Geometry
Lx_WG = 2.8*um; # width of the WG
Ly_WG = 0.1*um; # height of the WG
Lz_WG = 50*um; # length of the WG
y_min = 0;
gap_x = 2.4*um;

Lx_Cladding = 50*um; # width of the WG
Ly_Cladding = 2*um; # height of the WG
Lz_Cladding = 50*um; # length of the WG

Lx_Buried_Oxide = 50*um;
Ly_Buried_Oxide = 14.5*um;
Lz_Buried_Oxide = 50*um;

Lx_FDE      = 30*um;
Ly_FDE_min  = -8*um;
Ly_FDE_max  = 4*um;


mesh_cells_x    = 500;
mesh_cells_y    = 200;

bend_waveguide  = 0;
bend_radius     = 1000*um;
?"bend_radius   = "+num2str(bend_radius /um)+" um";

# Define wavelength of simulation
#wavelength_min      = 1480*nm;
#wavelength_max      = 1620*nm;
#num_sweep_pt        = 29;
wavelength_min      = 1550*nm;
wavelength_max      = 1550*nm;
num_sweep_pt        = 1;
wavelength_array    = linspace(wavelength_min,wavelength_max,num_sweep_pt);

# Material
material_core = "Si3N4 (Silicon Nitride) - Luke";
material_clad = "SiO2 (Glass) - Palik";

Max_Mode_Idx = 1;

folder_name = "Straight_WG_width_2_8um" + "\\";
log_filename = folder_name + "Find_Modes_straight_WG_multi_wavl_log.txt";
if(fileexists(log_filename)){rm(log_filename);}


################################################
# conduct simulation
################################################
switchtolayout;
deleteall;

um = 1e-6;
nm = 1e-9;

#write(log_filename,"mesh = "+num2str(mesh_cells_x)+"X"+num2str(mesh_cells_y));
#write(log_filename,"bend_radius = "+num2str(bend_radius /um)+" um");
#write(log_filename,"Lx_WG = "+num2str(Lx_WG)+"\n");

# Create folders if they do not yet exist
#for(wavl_idx=1:num_sweep_pt){
    #format short;
    #wavelength = wavelength_array(wavl_idx);

    #folder_path = folder_name + num2str(wavelength /nm);
    #?"mkdir "+folder_path;
    #system("mkdir "+folder_path);
#}


#WG
#addrect;
#set("name","WG");
#set("x", -gap_x/2-Lx_WG/2);
#set("x span",Lx_WG);
#set("y min",y_min);
#set("y max",y_min+Ly_WG);
##set("z",0);
##set("z span",Lz_WG);
#set("override mesh order from material database",true);
#set("mesh order",2);
#set("material",material_core);

#copy;
#set("x", gap_x/2+Lx_WG/2);

addrect;
set("name","WG");
set("x", -2.6*um);
set("x span",Lx_WG);
set("y min",y_min);
set("y max",y_min+Ly_WG);
#set("z",0);
#set("z span",Lz_WG);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

copy(5.2*um,0,0);

# BOX
addrect;
set("name","BOX");
set("x",0);
set("x span",Lx_Buried_Oxide);
set("y max",0);
set("y min",-Ly_Buried_Oxide);
#set("z",0);
#set("z span",Lz_Buried_Oxide);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_clad);

# Cladding
addrect;
set("name","Cladding");
set("x",0);
set("x span",Lx_Cladding);
set("y min",0);
set("y max",Ly_Cladding);
#set("z",0);
#set("z span",Lz_Cladding);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_clad);


addfde;
set("solver type","2D Z normal");
set("x",0*um);
set("y",0);
set("x span",Lx_FDE);
set("y min",Ly_FDE_min);
set("y max",Ly_FDE_max);
#set("x min bc","Metal");
#set("x max bc","Metal");
#set("y min bc","Metal");
#set("y max bc","Metal");
set("x min bc","PML");
set("x max bc","PML");
set("y min bc","PML");
set("y max bc","PML");
set("define x mesh by","number of mesh cells");
set("define y mesh by","number of mesh cells");
set("mesh cells x",mesh_cells_x);
set("mesh cells y",mesh_cells_y);

set("bent waveguide",bend_waveguide);
if (bend_waveguide == 1){
    set("bend location x", 0);
    set("bend location y", 0);
    set("bend location z", 0);
    set("bend radius",bend_radius);
}

addmesh;
set("name","mesh_waveguide");
#set("x min", -gap_x/2-Lx_WG -0.5*um);
#set("x max",  gap_x/2+Lx_WG +0.5*um );
set("x min", -6*um);
set("x max", 6*um );
set("y min",0-2*um);
set("y max",Ly_WG+2*um);
set("override x mesh",1);
set("override y mesh",1);
set("override z mesh",0);
set("set maximum mesh step",1);
set("dx",20*nm);
set("dy",20*nm);


# Create arrays to store results
neff_array = zeros(num_sweep_pt);
Comp_name_list = {"Ex","Ey","Ez","Hx","Hy","Hz"};
setnamed("FDE","wavelength",1550*nm);


#for(wavl_idx=1:num_sweep_pt){

    #switchtolayout;
    #wavelength = wavelength_array(wavl_idx);

    #setnamed("FDE","wavelength",wavelength);

    #findmodes;

    #format short;

    #folder_path = folder_name + num2str(wavelength /nm);
    #info_filename = folder_path+ "\Mode_info.txt";
    #if(fileexists(info_filename)){rm(info_filename);}

    ## Print header
    #write(info_filename,"modeidx,neff,ng,loss,polarization,beta_ang");

    #for (mode_idx=1:Max_Mode_Idx){

        #format short;
        #neff =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"neff"));
        #ng =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"ng"));
        #loss =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"loss"));
        #polarization=pinch(getdata("FDE::data::mode"+num2str(mode_idx),"TE polarization fraction"));

        #beta_ang = real(2*pi/wavelength * bend_radius * neff);

        #Ex = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ex"));
        #Ey = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ey"));
        #Ez = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ez"));
        #Hx = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hx"));
        #Hy = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hy"));
        #Hz = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hz"));

        #Comp_list = {Ex,Ey,Ez,Hx,Hy,Hz};
        #info = num2str(mode_idx) +",";

        #format long;
        #info = info + num2str(neff) +","+ num2str(ng) +","+ num2str(loss) +","+ num2str(polarization) +","+ num2str(beta_ang);
        #write(info_filename,info);

        ## Fundamental mode
        #if(mode_idx == 1){
            #wave_log = "Wavelength: " + num2str(wavelength /um) + " um";
            #neff_log = "Effective index: " + num2str(real(neff));
            #beta_log = "beta_ang: " + num2str(beta_ang);
            #?wave_log;
            #?neff_log;
            #?beta_log;
            #write(log_filename,wave_log + "\n" + neff_log + "\n" + beta_log + "\n");
        #}
        ## Write mode profile matrix
        #for (j=1:6){
            #format short;
            #filename = folder_path+"\Mode"+num2str(mode_idx)+"_"+Comp_name_list{j}+".txt";
            #if(fileexists(filename)){
                #rm(filename);
            #}
        #format long; # set num2str() to return 16 digits of precision
        #write(filename,num2str(Comp_list{j}));
        #}

    #}
#}