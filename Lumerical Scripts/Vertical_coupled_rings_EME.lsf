switchtolayout;
deleteall;

um = 1e-6;
nm = 1e-9;

# Geometry
Lx_upper = 10*um;   #length of the straight part of racetrack
Ly_upper = 2.8*um;  #width of the WG
Lz_upper = 0.1*um;  #height of the WG
z_upper  = 10*um;

Lx_lower = 10*um;   #length of the straight part of racetrack
Ly_lower = 2.8*um;  #width of the WG
Lz_lower = 0.1*um;  #height of the WG
z_lower  = 0*um;

#RDL WG
Lx_RDL = 50*um;   #length of the WG
Ly_RDL = 2.8*um;  #width of the WG
Lz_RDL = 0.1*um;  #height of the WG
z_RDL  = 5*um;

Lx_Cladding = 50*um; #length of the Cladding
Ly_Cladding = 50*um; #width of the Cladding
Lz_Cladding = 15*um;  #height of the Cladding

Lx_Buried_Oxide = 50*um;
Ly_Buried_Oxide = 50*um;
Lz_Buried_Oxide = 15*um;

EME_x_min = -15     *um;
EME_x_max = 15      *um;
EME_y_min = -10     *um;
EME_y_max = 10      *um;
EME_z_min = -12.5   *um;
EME_z_max = 12.5    *um;

mesh_step = 200e-9;
mesh_cells_x = 2000;
mesh_cells_y = 800;

radius_Upper    =   4 *um;    #radius of the Upper racetrack
radius_Lower    =   4 *um;    #radius of the lower ring
bend_radius_inner = 1000*um;
bend_radius  =  bend_radius_inner;
?"bend_radius = "+num2str(bend_radius*1e6)+" um";

Max_Mode_Idx = 1;

# Define wavelength of EMEulation
#wavelength_min = 1550*nm;
#wavelength_max = 1550*nm;
num_sweep_pt = 1;
wavelength_array = linspace(wavelength_min,wavelength_max,num_sweep_pt);

# Material
material_core     = "Si3N4 (Silicon Nitride) - Luke";
material_cladding = "SiO2 (Glass) - Palik";
alpha             = 0.3;        # display transparency for cladding

folder_name = "Vertical_EME" + "\\";
log_filename = folder_name + "Find_Modes_single_Ring_multi_wavl_XYZ_log.txt";
if(fileexists(log_filename)){rm(log_filename);}

write(log_filename,"mesh = "+num2str(mesh_cells_x)+"X"+num2str(mesh_cells_y));
write(log_filename,"bend_radius = "+num2str(bend_radius*1e6)+" um");
write(log_filename,"Lx_upper = "+num2str(Lx_upper)+"\n");
write(log_filename,"Lx_lower = "+num2str(Lx_lower)+"\n");
write(log_filename,"Lx_RDL = "+num2str(Lx_RDL)+"\n");

# Create folders if they do not yet exist
#for(wavl_idx=1:num_sweep_pt){
    #format short;
    #wavelength = wavelength_array(wavl_idx);

    #folder_path = folder_name + num2str(wavelength*1e9);
    #?"mkdir "+folder_path;
    #system("mkdir "+folder_path);
#}

# Upper racetrack Straight part
addrect;
set("name","Upper racetrack Straight part");
set("x",0);
set("x span",Lx_upper);
set("y",0);
set("y span",Ly_upper);
set("z min",z_upper);
set("z max",z_upper+ Lz_upper);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

# Left half ring of the Upper racetrack
addring;
set("name","Upper racetrack - left");
set("theta start",90);
set("theta stop",270);
set("inner radius",radius_Upper - Ly_upper/2);
set("outer radius",radius_Upper + Ly_upper/2);
set("x", -Lx_upper/2);

# Right half ring of the Upper racetrack
copy;
set("name","Upper racetrack - right");
set("theta start",-90);
set("theta stop",90);
set("x", Lx_upper/2);

# RDL WG
addrect;
set("name","RDL WG");
set("x",0);
set("x span",Lx_RDL);
set("y",0);
set("y span",Ly_RDL);
set("z min",z_RDL);
set("z max",z_RDL + Lz_RDL);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

# Lower racetrack Straight part
addrect;
set("name","Lower racetrack Straight part");
set("x",0);
set("x span",Lx_lower);
set("y",0);
set("y span",Ly_lower);
set("z min",z_lower);
set("z max",z_lower + Lz_lower);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

# Left half ring of the Lower racetrack
addring;
set("name","Lower racetrack - left");
set("theta start",90);
set("theta stop",270);
set("inner radius",radius_Lower - Ly_lower/2);
set("outer radius",radius_Lower + Ly_lower/2);
set("x", -Lx_Lower/2);

# Right half ring of the Lower racetrack
copy;
set("name","Lower racetrack - right");
set("theta start",-90);
set("theta stop",90);
set("x", Lx_Lower/2);

#BOX
addrect;
set("name","BOX");
set("x",0);
set("x span",Lx_Buried_Oxide);
set("y",0);
set("y span",Ly_Buried_Oxide);
#set("z max",0);
#set("z min",-Lz_Buried_Oxide);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_cladding);
set("alpha",alpha);

#Cladding
addrect;
set("name","Cladding");
set("x",0);
set("x span",Lx_Cladding);
set("y",0);
set("y span",Ly_Cladding);
#set("z min",0);
#set("z max",Lz_Cladding);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_cladding);
set("alpha",alpha);

# Set EME simulation
addeme;
set("wavelength" , wavelength);
set("index" , 1);
set("x min", EME_x_min);
set("y min", EME_y_min);
set("y max", EME_y_max);
set("z min", EME_z_min);
set("z max", EME_z_max);
set("energy conservation", "make passive");
set("display cells", 1);

# set cell properties
set("number of cell groups",3);
set("group spans",[3e-6; 10e-6; 3e-6]);
set("cells",[1; 19; 1]);
set("subcell method",[0; 1; 0]);   # 0 = none,  1 = CVCS

set("define y mesh by", "maximum mesh step");
set("define z mesh by", "maximum mesh step");
set("dy", mesh_step);
set("dz", mesh_step);
set("allow custom eigensolver settings", 1);
select("EME::Cells::cell_1");
seteigensolver("number of trial modes", num_mode);
seteigensolver("use max index", 0);
seteigensolver("n", search_mode_around);
seteigensolver("bent waveguide", 1);
seteigensolver("bend radius", bend_radius);
seteigensolver("bend orientation", bend_orientation);
seteigensolver("bend location", "user specified");
seteigensolver("bend location x", 0);
seteigensolver("bend location y", -coupler_gap/2-ring_width/2);
seteigensolver("bend location z", ring_thick/2);

set("bent waveguide",1);
set("bend location x", 0);
set("bend location y", 0);
set("bend location z", 0);
set("bend radius",bend_radius);

# Create arrays to store results
neff_array = zeros(num_sweep_pt);
Comp_name_list = {"Ex","Ey","Ez","Hx","Hy","Hz"};

for(wavl_idx=1:num_sweep_pt){

    switchtolayout;
    wavelength = wavelength_array(wavl_idx);

    setnamed("FDE","wavelength",wavelength);

    findmodes;

    format short;

    folder_path = folder_name + num2str(wavelength*1e9);
    info_filename = folder_path+ "\Mode_info.txt";
    if(fileexists(info_filename)){rm(info_filename);}

    #print header
    write(info_filename,"modeidx,neff,ng,loss,polarization,beta_ang");

    for (mode_idx=1:Max_Mode_Idx){

        format short;
        neff =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"neff"));
        ng =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"ng"));
        loss =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"loss"));
        polarization=pinch(getdata("FDE::data::mode"+num2str(mode_idx),"TE polarization fraction"));

        beta_ang = real(2*pi/wavelength * bend_radius * neff);

        Ex = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ex"));
        Ey = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ey"));
        Ez = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ez"));
        Hx = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hx"));
        Hy = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hy"));
        Hz = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hz"));

        Comp_list = {Ex,Ey,Ez,Hx,Hy,Hz};
        info = num2str(mode_idx) +",";

        format long;
        info = info + num2str(neff) +","+ num2str(ng) +","+ num2str(loss) +","+ num2str(polarization) +","+ num2str(beta_ang);
        write(info_filename,info);

        #Fundamental mode
        if(mode_idx == 1){
            wave_log = "Wavelength: " + num2str(wavelength*1e6) + " um";
            neff_log = "Effective index: " + num2str(real(neff));
            beta_log = "beta_ang: " + num2str(beta_ang);
            ?wave_log;
            ?neff_log;
            ?beta_log;
            write(log_filename,wave_log + "\n" + neff_log + "\n" + beta_log + "\n");
        }
        #write mode profile matrix
        for (j=1:6){
            format short;
            filename = folder_path+"\Mode"+num2str(mode_idx)+"_"+Comp_name_list{j}+".txt";
            if(fileexists(filename)){
                rm(filename);
            }
        format long; # set num2str() to return 16 digits of precision
        write(filename,num2str(Comp_list{j}));
        }

    }
}