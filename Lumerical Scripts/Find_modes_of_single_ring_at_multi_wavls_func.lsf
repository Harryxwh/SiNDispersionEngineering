###############################################################################
# This script is a function used to find the eigenmodes of a single bent waveguide
# Since FDE is a 2D solver focused on the cross section, the result does not depend on the geometry in z direction.

# Parameters:

# WG
# Lx_WG             :   width of the WG
# Ly_WG             :   height of the WG

# Cladding layer
# Lx_Cladding       :   width of the claddin layer
# Ly_Cladding       :   height of the cladding layer

# Box layer
# Lx_Buried_Oxide   :   width of the BOX layer
# Ly_Buried_Oxide   :   height of the BOX layer

# FDE region
# Lx_FDE            :   width of the FDE solver region
# Ly_FDE_min        :   ymin of the FDE solver region
# Ly_FDE_max        :   ymax of the FDE solver region

# Mesh settings
# mesh_cells_x      :   num of mesh cells in x direction
# mesh_cells_y      :   num of mesh cells in y direction

# bend_waveguide    :   1 = Yes, 0 = No
# bend_radius       :   bending radius of the inner WG

# material_core     :   material of the WG core, e.g. "Si3N4 (Silicon Nitride) - Luke";
# material_clad     :   material of the WG cladding, e.g. "SiO2 (Glass) - Palik";

# Max_Mode_Idx      :   num of eigenmodes to save into txt files. e.g. 2

# Define wavelength of simulation
# wavelength_min    :   starting wavelength
# wavelength_max    :   stoping wavelength
# num_sweep_pt_wavl :   num pf wavelength points to calculate

# Author: Weihao Xu
# Date: May. 5th, 2025
# Email: harryxwh@gmail.com
###############################################################################

# Housekeeping
switchtolayout;
deleteall;

# Define units
um = 1e-6;
nm = 1e-9;

# Setup the wavelength array
wavelength_array    = linspace(wavelength_min,wavelength_max,num_sweep_pt_wavl);

# Create the folder
format short;
if (bend_waveguide){
    foldername = 'Find_modes_of_single_ring_at_multi_wavls_radius_'+num2str(bend_radius/um)+'um_WGwidth_'+num2str(Lx_WG/nm)+'nm_WGthickness_'+num2str(Ly_WG/nm)+'nm_mesh_'+num2str(mesh_cells_x)+'X'+num2str(mesh_cells_y);
}
else{
    foldername = 'Find_modes_of_single_ring_at_multi_wavls_straight_WGwidth_'+num2str(Lx_WG/nm)+'nm_mesh_'+num2str(mesh_cells_x)+'X'+num2str(mesh_cells_y);
}
system('if exist '+foldername+' rmdir /s /q '+foldername);
system('mkdir '+foldername);

# Record parameters in a log file
format long;
log_filename = foldername + '\\' + 'log.txt';
write(log_filename,"mesh = "+num2str(mesh_cells_x)+"X"+num2str(mesh_cells_y));
write(log_filename,"bend_radius = "+num2str(bend_radius /um)+" um");
write(log_filename,"Lx_WG = " + num2str(Lx_WG) + "Ly_WG = " + num2str(Ly_WG) + "\n");

# Create folders for each wavl
for(wavelength = wavelength_array){
    format short;
    foldername_wavl = foldername + '\\' + num2str(wavelength /nm);
    system("mkdir "+foldername_wavl);
}

# WG
addrect;
set("name","WG");
set("x",0);
set("x span",Lx_WG);
set("y min",0);
set("y max",Ly_WG);
#set("z",0);
#set("z span",Lz_WG);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

# BOX
addrect;
set("name","BOX");
set("x",0);
set("x span",Lx_Buried_Oxide);
set("y max",0);
set("y min",-Ly_Buried_Oxide);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_clad);

# Cladding
addrect;
set("name","Cladding");
set("x",0);
set("x span",Lx_Cladding);
set("y min",0);
set("y max",Ly_Cladding);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_clad);

# FDE solver region
addfde;
set("solver type","2D Z normal");
set("x",0*um);
set("y",0);
set("x span",Lx_FDE);
set("y min",Ly_FDE_min);
set("y max",Ly_FDE_max);
set("x min bc","PML");
set("x max bc","PML");
set("y min bc","PML");
set("y max bc","PML");
set("define x mesh by","number of mesh cells");
set("define y mesh by","number of mesh cells");
set("mesh cells x",mesh_cells_x);
set("mesh cells y",mesh_cells_y);

# If the waveguide is bent, set the bending radius
set("bent waveguide",bend_waveguide);
if (bend_waveguide == 1){
    set("bend location x", 0);
    set("bend location y", 0);
    set("bend location z", 0);
    set("bend radius",bend_radius);
}

Comp_name_list = {"Ex","Ey","Ez","Hx","Hy","Hz"};

for(wavl_idx=1:num_sweep_pt_wavl){

    switchtolayout;
    wavelength = wavelength_array(wavl_idx);

    setnamed("FDE","wavelength",wavelength);

    findmodes;

    format short;
    foldername_wavl = foldername + '\\' + num2str(wavelength /nm);
    info_filename = foldername_wavl + '\\' + "Mode_info.txt";
    if(fileexists(info_filename)){rm(info_filename);}

    # Print header
    write(info_filename,"modeidx,neff,ng,loss,polarization,beta_ang");

    for (mode_idx=1:Max_Mode_Idx){

        format short;
        neff            = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"neff"));
        ng              = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"ng"));
        loss            = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"loss"));
        polarization    = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"TE polarization fraction"));

        beta_ang = real(2*pi/wavelength * bend_radius * neff);

        Ex = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ex"));
        Ey = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ey"));
        Ez = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ez"));
        Hx = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hx"));
        Hy = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hy"));
        Hz = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hz"));

        Comp_list = {Ex,Ey,Ez,Hx,Hy,Hz};
        info = num2str(mode_idx) +",";

        format long;
        info = info + num2str(neff) +","+ num2str(ng) +","+ num2str(loss) +","+ num2str(polarization) +","+ num2str(beta_ang);
        write(info_filename,info);

        # Fundamental mode
        if(mode_idx == 1){
            wave_log = "Wavelength: " + num2str(wavelength /um) + " um";
            neff_log = "Effective index: " + num2str(real(neff));
            beta_log = "beta_ang: " + num2str(beta_ang);
            ?wave_log;
            ?neff_log;
            ?beta_log;
            write(log_filename,wave_log + "\n" + neff_log + "\n" + beta_log + "\n");
        }

        # Write mode profile matrix
        for (j=1:6){
            format short;
            filename = foldername_wavl+'\\'+"Mode"+num2str(mode_idx)+"_"+Comp_name_list{j}+".txt";
            if(fileexists(filename)){
                rm(filename);
            }
            format long; # set num2str() to return 16 digits of precision
            write(filename,num2str(Comp_list{j}));
        }

    }
    ?"\n";
}