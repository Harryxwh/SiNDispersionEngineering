###############################################################################
# This script is a function used to find the eigenmodes of a single bent waveguide
# Since FDE is a 2D solver focused on the cross section, the result does not depend on the geometry in z direction.

# Author: Weihao Xu
# Date: May. 5th, 2025
# Email: harryxwh@gmail.com
###############################################################################

# Housekeeping
switchtolayout;
deleteall;

# Define units
um = 1e-6;
nm = 1e-9;

###############################################################################
# Parameters
###############################################################################

Lx_WG = 8*um; # thickness ofthe WG
Ly_WG = 0.1*um; # thickness ofthe WG

Lx_Cladding = 50*um; # width of the WG
Ly_Cladding = 2*um; # thickness ofthe WG

Lx_Buried_Oxide = 50*um;
Ly_Buried_Oxide = 15*um;
Lz_Buried_Oxide = 50*um;

Lx_FDE = 20*um;
Ly_FDE_min = -8*um;
Ly_FDE_max = 8*um;

mesh_step = 200e-9;
mesh_cells_x = 1000;
mesh_cells_y = 800;

Lx_inner = 8*um;
bend_radius_inner = 1000*um;
gap = 3*um;

bend_radius =  bend_radius_inner + Lx_inner*0.5 + gap + Lx_WG*0.5 ;
#bend_radius =  bend_radius_inner;
?"bend_radius = "+num2str(bend_radius /um)+" um";

Max_Mode_Idx = 1;

# Define wavelength of simulation
wavelength_min = 1550*nm;
wavelength_max = 1550*nm;
num_sweep_pt = 1;
wavelength_array = linspace(wavelength_min,wavelength_max,num_sweep_pt);

# Material
material_core = "Si3N4 (Silicon Nitride) - Luke";
material_clad = "SiO2 (Glass) - Palik";

folder_name = "OuterRingDesigned_L_inner_8um_gap_3um_2762nm_1500_1600_21wavls" + "\\";
log_filename = folder_name + "Find_Modes_single_Ring_multi_wavl_XYZ_log.txt";
if(fileexists(log_filename)){rm(log_filename);}

write(log_filename,"mesh = "+num2str(mesh_cells_x)+"X"+num2str(mesh_cells_y));
write(log_filename,"bend_radius = "+num2str(bend_radius /um)+" um");
write(log_filename,"Lx_WG = "+num2str(Lx_WG)+"\n");

# Create folders if they do not yet exist
#for(wavl_idx=1:num_sweep_pt){
    #format short;
    #wavelength = wavelength_array(wavl_idx);

    #folder_path = folder_name + num2str(wavelength /nm);
    #?"mkdir "+folder_path;
    #system("mkdir "+folder_path);
#}

#WG
addrect;
set("name","WG");
set("x",0);
set("x span",Lx_WG);
set("y min",0);
set("y max",Ly_WG);
set("override mesh order from material database",true);
set("mesh order",2);
set("material",material_core);

# BOX
addrect;
set("name","BOX");
set("x",0);
set("x span",Lx_Buried_Oxide);
set("y max",0);
set("y min",-Ly_Buried_Oxide);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_clad);

# Cladding
addrect;
set("name","Cladding");
set("x",0);
set("x span",Lx_Cladding);
set("y min",0);
set("y max",Ly_Cladding);
set("override mesh order from material database",true);
set("mesh order",3);
set("material",material_clad);

# FDE solver region
addfde;
set("solver type","2D Z normal");
set("x",0*um);
set("y",0);
set("x span",Lx_FDE);
set("y min",Ly_FDE_min);
set("y max",Ly_FDE_max);
set("x min bc","PML");
set("x max bc","PML");
set("y min bc","PML");
set("y max bc","PML");
set("define x mesh by","number of mesh cells");
set("define y mesh by","number of mesh cells");
set("mesh cells x",mesh_cells_x);
set("mesh cells y",mesh_cells_y);

set("bent waveguide", 1);
set("bend location x", 0);
set("bend location y", 0);
set("bend location z", 0);
set("bend radius",bend_radius);

Comp_name_list = {"Ex","Ey","Ez","Hx","Hy","Hz"};

for(wavl_idx=1:num_sweep_pt){

    switchtolayout;
    wavelength = wavelength_array(wavl_idx);

    setnamed("FDE","wavelength",wavelength);

    findmodes;

    format short;

    folder_path = folder_name + num2str(wavelength /nm);
    info_filename = folder_path+ "\Mode_info.txt";
    if(fileexists(info_filename)){rm(info_filename);}

    # Print header
    write(info_filename,"modeidx,neff,ng,loss,polarization,beta_ang");

    for (mode_idx=1:Max_Mode_Idx){

        format short;
        neff =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"neff"));
        ng =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"ng"));
        loss =pinch(getdata("FDE::data::mode"+num2str(mode_idx),"loss"));
        polarization=pinch(getdata("FDE::data::mode"+num2str(mode_idx),"TE polarization fraction"));

        beta_ang = real(2*pi/wavelength * bend_radius * neff);

        Ex = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ex"));
        Ey = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ey"));
        Ez = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Ez"));
        Hx = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hx"));
        Hy = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hy"));
        Hz = pinch(getdata("FDE::data::mode"+num2str(mode_idx),"Hz"));

        Comp_list = {Ex,Ey,Ez,Hx,Hy,Hz};
        info = num2str(mode_idx) +",";

        format long;
        info = info + num2str(neff) +","+ num2str(ng) +","+ num2str(loss) +","+ num2str(polarization) +","+ num2str(beta_ang);
        write(info_filename,info);

        # Fundamental mode
        if(mode_idx == 1){
            wave_log = "Wavelength: " + num2str(wavelength /um) + " um";
            neff_log = "Effective index: " + num2str(real(neff));
            beta_log = "beta_ang: " + num2str(beta_ang);
            ?wave_log;
            ?neff_log;
            ?beta_log;
            write(log_filename,wave_log + "\n" + neff_log + "\n" + beta_log + "\n");
        }
        # Write mode profile matrix
        for (j=1:6){
            format short;
            filename = folder_path+"\Mode"+num2str(mode_idx)+"_"+Comp_name_list{j}+".txt";
            if(fileexists(filename)){
                rm(filename);
            }
        format long; # set num2str() to return 16 digits of precision
        write(filename,num2str(Comp_list{j}));
        }

    }
}